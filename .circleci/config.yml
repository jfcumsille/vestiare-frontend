version: 2.1
commands:
  install-doppler:
    steps:
      - run:
          name: Install Doppler CLI
          command: curl -Ls https://cli.doppler.com/install.sh | sudo sh

jobs:
  eslint:
    docker:
      - image: cimg/node:16.14
    steps:
      - checkout
      - restore_cache:
          keys:
          - node-modules-cache-{{ checksum "package-lock.json" }}
          - node-modules-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: node-modules-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Lint with ESLint
          command: npm run lint:eslint
  stylelint:
    docker:
      - image: cimg/node:16.14
    steps:
      - checkout
      - restore_cache:
          keys:
          - node-modules-cache-{{ checksum "package-lock.json" }}
          - node-modules-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: node-modules-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Lint with StyleLint
          command: npm run lint:stylelint
  vitest:
    docker:
      - image: cimg/node:16.14
    steps:
      - checkout
      - restore_cache:
          keys:
          - node-modules-cache-{{ checksum "package-lock.json" }}
          - node-modules-cache-
      - save_cache:
          key: node-modules-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - install-doppler
      - run:
          name: Test with Vitest
          command: doppler run --token $CI_DOPPLER_TOKEN --config ci -- npm run test:vitest
  no-fixup-commits:
    docker:
      - image: cimg/node:16.14
    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log main... | grep 'fixup!'
  deploy:
    docker:
      - image: cimg/node:16.14
    parameters:
      env:
        type: string
      cloudflare_api_token:
        type: string
      cloudflare_account_id:
        type: string
      doppler_token:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
          - node-modules-cache-{{ checksum "package-lock.json" }}
          - node-modules-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: node-modules-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - install-doppler
      - run:
          name: Build the application
          command: doppler run --token << parameters.doppler_token >> --config << parameters.env >> -- npm run build
      - run:
          name: Upload to Cloudflare Pages
          command: CLOUDFLARE_API_TOKEN=<< parameters.cloudflare_api_token >> CLOUDFLARE_ACCOUNT_ID=<< parameters.cloudflare_account_id >> npx wrangler pages publish dist --project-name=$CLOUDFLARE_PROJECT_NAME --commit-dirty=true --branch main

workflows:
  pull_request:
    jobs:
      - eslint:
          filters:
            branches:
              ignore:
                - main
                - production
      - stylelint:
          filters:
            branches:
              ignore:
                - main
                - production
      - vitest:
          filters:
            branches:
              ignore:
                - main
                - production
      - no-fixup-commits:
          filters:
            branches:
              ignore:
                - main
                - production
  main:
    jobs:
      - vitest:
          filters:
            branches:
              only:
                - main
      - deploy:
          env: stg
          cloudflare_api_token: $CLOUDFLARE_STG_API_TOKEN
          cloudflare_account_id: $CLOUDFLARE_STG_ACCOUNT_ID
          doppler_token: $STG_DOPPLER_TOKEN
          context: org-global
          requires:
            - vitest
          filters:
            branches:
              only: main
  production:
    jobs:
      - deploy:
          env: prd
          cloudflare_api_token: $CLOUDFLARE_PRD_API_TOKEN
          cloudflare_account_id: $CLOUDFLARE_PRD_ACCOUNT_ID
          doppler_token: $PRD_DOPPLER_TOKEN
          context: org-global
          filters:
            branches:
              only: production
